// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FoodTag is an object representing the database table.
type FoodTag struct {
	FoodId int `boil:"foodId" json:"foodId" toml:"foodId" yaml:"foodId"`
	TagId  int `boil:"tagId" json:"tagId" toml:"tagId" yaml:"tagId"`
	UserId int `boil:"userId" json:"userId" toml:"userId" yaml:"userId"`

	R *foodTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L foodTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FoodTagColumns = struct {
	FoodId string
	TagId  string
	UserId string
}{
	FoodId: "foodId",
	TagId:  "tagId",
	UserId: "userId",
}

var FoodTagTableColumns = struct {
	FoodId string
	TagId  string
	UserId string
}{
	FoodId: "FoodTags.foodId",
	TagId:  "FoodTags.tagId",
	UserId: "FoodTags.userId",
}

// Generated where

var FoodTagWhere = struct {
	FoodId whereHelperint
	TagId  whereHelperint
	UserId whereHelperint
}{
	FoodId: whereHelperint{field: "`FoodTags`.`foodId`"},
	TagId:  whereHelperint{field: "`FoodTags`.`tagId`"},
	UserId: whereHelperint{field: "`FoodTags`.`userId`"},
}

// FoodTagRels is where relationship names are stored.
var FoodTagRels = struct {
}{}

// foodTagR is where relationships are stored.
type foodTagR struct {
}

// NewStruct creates a new relationship struct
func (*foodTagR) NewStruct() *foodTagR {
	return &foodTagR{}
}

// foodTagL is where Load methods for each relationship are stored.
type foodTagL struct{}

var (
	foodTagAllColumns            = []string{"foodId", "tagId", "userId"}
	foodTagColumnsWithoutDefault = []string{"foodId", "tagId", "userId"}
	foodTagColumnsWithDefault    = []string{}
	foodTagPrimaryKeyColumns     = []string{"foodId", "tagId", "userId"}
	foodTagGeneratedColumns      = []string{}
)

type (
	// FoodTagSlice is an alias for a slice of pointers to FoodTag.
	// This should almost always be used instead of []FoodTag.
	FoodTagSlice []*FoodTag
	// FoodTagHook is the signature for custom FoodTag hook methods
	FoodTagHook func(context.Context, boil.ContextExecutor, *FoodTag) error

	foodTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	foodTagType                 = reflect.TypeOf(&FoodTag{})
	foodTagMapping              = queries.MakeStructMapping(foodTagType)
	foodTagPrimaryKeyMapping, _ = queries.BindMapping(foodTagType, foodTagMapping, foodTagPrimaryKeyColumns)
	foodTagInsertCacheMut       sync.RWMutex
	foodTagInsertCache          = make(map[string]insertCache)
	foodTagUpdateCacheMut       sync.RWMutex
	foodTagUpdateCache          = make(map[string]updateCache)
	foodTagUpsertCacheMut       sync.RWMutex
	foodTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var foodTagAfterSelectMu sync.Mutex
var foodTagAfterSelectHooks []FoodTagHook

var foodTagBeforeInsertMu sync.Mutex
var foodTagBeforeInsertHooks []FoodTagHook
var foodTagAfterInsertMu sync.Mutex
var foodTagAfterInsertHooks []FoodTagHook

var foodTagBeforeUpdateMu sync.Mutex
var foodTagBeforeUpdateHooks []FoodTagHook
var foodTagAfterUpdateMu sync.Mutex
var foodTagAfterUpdateHooks []FoodTagHook

var foodTagBeforeDeleteMu sync.Mutex
var foodTagBeforeDeleteHooks []FoodTagHook
var foodTagAfterDeleteMu sync.Mutex
var foodTagAfterDeleteHooks []FoodTagHook

var foodTagBeforeUpsertMu sync.Mutex
var foodTagBeforeUpsertHooks []FoodTagHook
var foodTagAfterUpsertMu sync.Mutex
var foodTagAfterUpsertHooks []FoodTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FoodTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FoodTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FoodTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FoodTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FoodTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FoodTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FoodTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FoodTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FoodTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range foodTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFoodTagHook registers your hook function for all future operations.
func AddFoodTagHook(hookPoint boil.HookPoint, foodTagHook FoodTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		foodTagAfterSelectMu.Lock()
		foodTagAfterSelectHooks = append(foodTagAfterSelectHooks, foodTagHook)
		foodTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		foodTagBeforeInsertMu.Lock()
		foodTagBeforeInsertHooks = append(foodTagBeforeInsertHooks, foodTagHook)
		foodTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		foodTagAfterInsertMu.Lock()
		foodTagAfterInsertHooks = append(foodTagAfterInsertHooks, foodTagHook)
		foodTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		foodTagBeforeUpdateMu.Lock()
		foodTagBeforeUpdateHooks = append(foodTagBeforeUpdateHooks, foodTagHook)
		foodTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		foodTagAfterUpdateMu.Lock()
		foodTagAfterUpdateHooks = append(foodTagAfterUpdateHooks, foodTagHook)
		foodTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		foodTagBeforeDeleteMu.Lock()
		foodTagBeforeDeleteHooks = append(foodTagBeforeDeleteHooks, foodTagHook)
		foodTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		foodTagAfterDeleteMu.Lock()
		foodTagAfterDeleteHooks = append(foodTagAfterDeleteHooks, foodTagHook)
		foodTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		foodTagBeforeUpsertMu.Lock()
		foodTagBeforeUpsertHooks = append(foodTagBeforeUpsertHooks, foodTagHook)
		foodTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		foodTagAfterUpsertMu.Lock()
		foodTagAfterUpsertHooks = append(foodTagAfterUpsertHooks, foodTagHook)
		foodTagAfterUpsertMu.Unlock()
	}
}

// One returns a single foodTag record from the query.
func (q foodTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FoodTag, error) {
	o := &FoodTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for FoodTags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FoodTag records from the query.
func (q foodTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (FoodTagSlice, error) {
	var o []*FoodTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to FoodTag slice")
	}

	if len(foodTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FoodTag records in the query.
func (q foodTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count FoodTags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q foodTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if FoodTags exists")
	}

	return count > 0, nil
}

// FoodTags retrieves all the records using an executor.
func FoodTags(mods ...qm.QueryMod) foodTagQuery {
	mods = append(mods, qm.From("`FoodTags`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`FoodTags`.*"})
	}

	return foodTagQuery{q}
}

// FindFoodTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFoodTag(ctx context.Context, exec boil.ContextExecutor, foodId int, tagId int, userId int, selectCols ...string) (*FoodTag, error) {
	foodTagObj := &FoodTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `FoodTags` where `foodId`=? AND `tagId`=? AND `userId`=?", sel,
	)

	q := queries.Raw(query, foodId, tagId, userId)

	err := q.Bind(ctx, exec, foodTagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from FoodTags")
	}

	if err = foodTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return foodTagObj, err
	}

	return foodTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FoodTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no FoodTags provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(foodTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	foodTagInsertCacheMut.RLock()
	cache, cached := foodTagInsertCache[key]
	foodTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			foodTagAllColumns,
			foodTagColumnsWithDefault,
			foodTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(foodTagType, foodTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(foodTagType, foodTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `FoodTags` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `FoodTags` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `FoodTags` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, foodTagPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into FoodTags")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FoodId,
		o.TagId,
		o.UserId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for FoodTags")
	}

CacheNoHooks:
	if !cached {
		foodTagInsertCacheMut.Lock()
		foodTagInsertCache[key] = cache
		foodTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FoodTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FoodTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	foodTagUpdateCacheMut.RLock()
	cache, cached := foodTagUpdateCache[key]
	foodTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			foodTagAllColumns,
			foodTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("mysql: unable to update FoodTags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `FoodTags` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, foodTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(foodTagType, foodTagMapping, append(wl, foodTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update FoodTags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by update for FoodTags")
	}

	if !cached {
		foodTagUpdateCacheMut.Lock()
		foodTagUpdateCache[key] = cache
		foodTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q foodTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all for FoodTags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected for FoodTags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FoodTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foodTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `FoodTags` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, foodTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to update all in foodTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to retrieve rows affected all in update all foodTag")
	}
	return rowsAff, nil
}

var mySQLFoodTagUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FoodTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysql: no FoodTags provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(foodTagColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFoodTagUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	foodTagUpsertCacheMut.RLock()
	cache, cached := foodTagUpsertCache[key]
	foodTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			foodTagAllColumns,
			foodTagColumnsWithDefault,
			foodTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			foodTagAllColumns,
			foodTagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysql: unable to upsert FoodTags, could not build update column list")
		}

		ret := strmangle.SetComplement(foodTagAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`FoodTags`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `FoodTags` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(foodTagType, foodTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(foodTagType, foodTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for FoodTags")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(foodTagType, foodTagMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to retrieve unique values for FoodTags")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for FoodTags")
	}

CacheNoHooks:
	if !cached {
		foodTagUpsertCacheMut.Lock()
		foodTagUpsertCache[key] = cache
		foodTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FoodTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FoodTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysql: no FoodTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), foodTagPrimaryKeyMapping)
	sql := "DELETE FROM `FoodTags` WHERE `foodId`=? AND `tagId`=? AND `userId`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete from FoodTags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by delete for FoodTags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q foodTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysql: no foodTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from FoodTags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for FoodTags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FoodTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(foodTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foodTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `FoodTags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, foodTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: unable to delete all from foodTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to get rows affected by deleteall for FoodTags")
	}

	if len(foodTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FoodTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFoodTag(ctx, exec, o.FoodId, o.TagId, o.UserId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FoodTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FoodTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foodTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `FoodTags`.* FROM `FoodTags` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, foodTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in FoodTagSlice")
	}

	*o = slice

	return nil
}

// FoodTagExists checks if the FoodTag row exists.
func FoodTagExists(ctx context.Context, exec boil.ContextExecutor, foodId int, tagId int, userId int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `FoodTags` where `foodId`=? AND `tagId`=? AND `userId`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, foodId, tagId, userId)
	}
	row := exec.QueryRowContext(ctx, sql, foodId, tagId, userId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if FoodTags exists")
	}

	return exists, nil
}

// Exists checks if the FoodTag row exists.
func (o *FoodTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FoodTagExists(ctx, exec, o.FoodId, o.TagId, o.UserId)
}
